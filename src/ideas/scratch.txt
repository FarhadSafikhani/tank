    <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/7.4.0/pixi.min.js"></script>


  createBody() {


        // const tankVertices  = [
        //     // Hull vertices (central rectangle) scaled by 30%
        //     { x: -10 * 1.3, y: -10 * 1.3 }, // Top-left of the hull
        //     { x: 10 * 1.3, y: -10 * 1.3 },  // Top-right of the hull
        //     { x: 10 * 1.3, y: 10 * 1.3 },   // Bottom-right of the hull
        //     { x: -10 * 1.3, y: 10 * 1.3 },  // Bottom-left of the hull
        
        //     // Left track vertices forming an octagon, scaled by 30%
        //     { x: -12 * 1.3, y: -15 * 1.3 }, // Top-left chamfer of the left track
        //     { x: -15 * 1.3, y: -12 * 1.3 }, // Top-left corner of the left track
        //     { x: -15 * 1.3, y: 12 * 1.3 },  // Bottom-left corner of the left track
        //     { x: -12 * 1.3, y: 15 * 1.3 },  // Bottom-left chamfer of the left track
        //     { x: 12 * 1.3, y: 15 * 1.3 },   // Bottom-right chamfer of the left track
        //     { x: 15 * 1.3, y: 12 * 1.3 },   // Bottom-right corner of the left track
        //     { x: 15 * 1.3, y: -12 * 1.3 },  // Top-right corner of the left track
        //     { x: 12 * 1.3, y: -15 * 1.3 },  // Top-right chamfer of the left track
        
        //     // Right track vertices forming an octagon, scaled by 30% (mirrored relative to the left track)
        //     { x: 17 * 1.3, y: -15 * 1.3 },  // Top-left chamfer of the right track
        //     { x: 20 * 1.3, y: -12 * 1.3 },  // Top-left corner of the right track
        //     { x: 20 * 1.3, y: 12 * 1.3 },   // Bottom-left corner of the right track
        //     { x: 17 * 1.3, y: 15 * 1.3 },   // Bottom-left chamfer of the right track
        //     { x: -17 * 1.3, y: 15 * 1.3 },  // Bottom-right chamfer of the right track
        //     { x: -20 * 1.3, y: 12 * 1.3 },  // Bottom-right corner of the right track
        //     { x: -20 * 1.3, y: -12 * 1.3 }, // Top-right corner of the right track
        //     { x: -17 * 1.3, y: -15 * 1.3 }  // Top-right chamfer of the right track
        // ];
            

        // const tankBody = Matter.Bodies.fromVertices(this.x, this.y, [tankVertices],
        // {
        //     isStatic: false, friction: this.friction, 
        //     frictionAir: 0.01, restitution: 0.4, 
        //     density: 0.4,
        //     collisionFilter: {
        //         category: CollisionCategory.PLAYER, // category for projectiles
        //         mask: CollisionCategory.PROJECTILE | CollisionCategory.PLAYER // mask for other objects (e.g., players)
        //         // group: 1
        //     },
        // });
        
        const tankBody = Matter.Bodies.rectangle(this.x, this.y, this.w, this.h,
        {
            isStatic: false, friction: this.friction, 
            frictionAir: 0.01, restitution: 0.4, 
            density: 0.4,
            chamfer: { radius: 6 },
            collisionFilter: {
                category: CollisionCategory.PLAYER, // category for projectiles
                mask: CollisionCategory.PROJECTILE | CollisionCategory.PLAYER // mask for other objects (e.g., players)
                // group: 1
            },
        });

        const points = tankBody.vertices.map(vertex => {
            return { x: this.x - vertex.x, y: this.y - vertex.y };
        });

        this.verts = JSON.stringify(points);
        return tankBody;
    }



        // createTriangularMuzzleFlash() {
    //     const flash = new PIXI.Graphics();
    
    //     // Main flash triangle
    //     flash.beginFill(0xFFFFFF);
    //     flash.drawPolygon([
    //         -10, 0,  // Point 1: Left point of the base
    //         20, 0,   // Point 2: Right point of the base
    //         5, -60   // Point 3: Top point making the triangle
    //     ]);
    //     flash.endFill();
    
    //     // Smaller triangles for a dynamic effect
    //     flash.beginFill(0xFFFF00, 0.5); // Slightly transparent for glow effect
    //     // Smaller triangle 1
    //     flash.drawPolygon([
    //         -5, 0,
    //         10, 0,
    //         0, -30
    //     ]);
    //     // Smaller triangle 2
    //     flash.drawPolygon([
    //         0, 0,
    //         15, 0,
    //         10, -40
    //     ]);
    //     flash.endFill();
    
    //     return flash;
    // }


        updateTurretAngle() {
        // const minSnapDistance = 0.05;
    
        // // Ensure turretAngle is always within 0 to 2*PI range
        // this.turretAngle = (this.turretAngle + 2 * Math.PI) % (2 * Math.PI);
    
        // // Calculate the difference in angles, taking into account angle wrapping
        // let angleDiff = (this.turretAngleTarget - this.turretAngle + Math.PI) % (2 * Math.PI) - Math.PI;
    
        // // Adjust angleDiff to be within the range -PI to PI for direct rotation
        // if (angleDiff > Math.PI) {
        //     angleDiff -= 2 * Math.PI;
        // } else if (angleDiff < -Math.PI) {
        //     angleDiff += 2 * Math.PI;
        // }
    
        // // Determine the step to move the turret by, ensuring it does not overshoot the target angle
        // let step = Math.sign(angleDiff) * Math.min(Math.abs(angleDiff), this.turretSpeed);
    
        // // If the absolute difference is greater than a minimum threshold, update the angle by a fixed step
        // if (Math.abs(angleDiff) > minSnapDistance) {
        //     this.turretAngle += step;
    
        //     // Normalize the turret angle to stay within the 0 to 2*PI range
        //     this.turretAngle = (this.turretAngle + 2 * Math.PI) % (2 * Math.PI);
        // } else {
        //     // If the turret is close enough to the target angle, snap directly to the target angle
        //     this.turretAngle = this.turretAngleTarget;
        // }
        this.turretAngle = this.turretAngleTarget;
    }



            
        // // Limit velocity to maximum speed
        // const speed = Math.sqrt(this.body.velocity.x * this.body.velocity.x + this.body.velocity.y * this.body.velocity.y);
        // if (speed > this.maxSpeed) {
        //     const ratio = this.maxSpeed / speed;
        //     Matter.Body.setVelocity(this.body, {
        //         x: this.body.velocity.x * ratio,
        //         y: this.body.velocity.y * ratio
        //     });
        // }
